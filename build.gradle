plugins {
	id 'groovy'
	id 'codenarc'
	id 'maven-publish'
	id 'java-gradle-plugin'
	id 'com.gradle.plugin-publish' version '0.10.0'
	id "com.diffplug.gradle.spotless" version "3.18.0"
	id "com.github.hierynomus.license" version "0.15.0"
}

apply from: 'gradle/quality.gradle'

repositories { mavenCentral() }

dependencies {
	implementation gradleApi()
	implementation localGroovy()

	compile 'org.yaml:snakeyaml:1.23'

	testCompile gradleTestKit()
	testRuntime 'org.postgresql:postgresql:42.2.5'
	testCompile "org.spockframework:spock-core:1.2-groovy-2.5"
	testCompile "org.testcontainers:spock:1.10.6"
	testCompile "org.testcontainers:postgresql:1.10.6"
}

sourceSets {
	integrationTest {
		groovy{ srcDir file('src/integTest/groovy') }
		resources { srcDir file('src/integTest/resources') }

		compileClasspath += sourceSets.main.output + configurations.testRuntime + configurations.compileClasspath
		runtimeClasspath += output + compileClasspath
	}
	functionalTest {
		groovy { srcDirs file('src/funcTest/groovy') }
		resources { srcDir file('src/funcTest/resources') }

		compileClasspath += sourceSets.main.output + configurations.testRuntime + configurations.compileClasspath
		runtimeClasspath += output + compileClasspath
	}
}

group = 'net.kaleidos.dwbh'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

compileJava {
	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'
}

pluginBundle {
	website = 'https://github.com/dont-worry-be-happy/dwbh-gradle-fixtures'
	vcsUrl = 'https://github.com/dont-worry-be-happy/dwbh-gradle-fixtures'
	tags = [
		'database',
		'fixtures',
		'jdbc'
	]
}

gradlePlugin {
	plugins {
		fixturesPlugin {
			id = 'net.kaleidos.dwbh.gradle-fixtures-plugin'
			displayName = 'DWBH Fixtures plugin'
			description = 'Simple plugin for loading database fixtures using a JDBC connection'
			implementationClass = 'dwbh.gradle.fixtures.FixturesPlugin'
		}
	}
}

task integrationTest(type: Test) {
	description     = 'Runs the integration tests.'
	group           = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath       = sourceSets.integrationTest.runtimeClasspath

	mustRunAfter test
}

task functionalTest(type: Test) {
	description     = 'Runs the functional tests.'
	group           = 'verification'
	testClassesDirs = sourceSets.functionalTest.output.classesDirs
	classpath       = sourceSets.functionalTest.runtimeClasspath

	mustRunAfter test
}

check.dependsOn integrationTest, functionalTest
